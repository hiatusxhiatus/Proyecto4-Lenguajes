<div class="page-header">
  <div>
    <h1 class="page-title">üÜï Nueva Factura</h1>
    <p style="color: var(--text-muted); margin-top: 0.5rem;">Crea una factura completa con productos e impuestos</p>
  </div>
  <div class="page-actions">
    <%= link_to "Cancelar", invoices_path, class: "btn btn-secondary" %>
  </div>
</div>

<div class="grid grid-cols-2">
  <div>
    <div class="card">
      <div class="card-header">
        <h3 class="card-title">üë§ Informaci√≥n del Cliente</h3>
      </div>
      <div class="card-body">
        <%= form_with model: @invoice, local: true, id: "invoice-form" do |form| %>
          <div class="form-group">
            <%= form.label :client_name, "Nombre del Cliente", class: "form-label" %>
            <%= form.text_field :client_name, class: "form-control", placeholder: "Empresa o persona", required: true %>
          </div>
          
          <div class="form-group">
            <%= form.label :client_email, "Email (opcional)", class: "form-label" %>
            <%= form.email_field :client_email, class: "form-control", placeholder: "cliente@empresa.com" %>
            <small class="form-hint">Para env√≠o autom√°tico del PDF</small>
          </div>
        <% end %>
      </div>
    </div>

    <div class="card">
      <div class="card-header">
        <div style="display: flex; justify-content: space-between; align-items: center;">
          <h3 class="card-title">üõí Productos Agregados</h3>
          <span id="items-count" class="badge badge-success" style="display: none;">0 productos</span>
        </div>
      </div>
      <div class="card-body">
        <div id="invoice-items">
          <div class="empty-state" id="empty-state">
            <div style="font-size: 2rem; margin-bottom: 0.5rem;">üì¶</div>
            <h4>Sin productos</h4>
            <p>Agrega productos usando el panel lateral</p>
          </div>
        </div>
        
        <div id="totals-summary" style="display: none; background: linear-gradient(135deg, var(--bg-tertiary) 0%, var(--bg-secondary) 100%); padding: 1.5rem; border-radius: 0.75rem; border: 1px solid var(--border); margin-top: 1.5rem;">
          <div style="display: flex; justify-content: space-between; margin-bottom: 0.75rem;">
            <span>Subtotal:</span>
            <strong id="subtotal-amount" class="currency">‚Ç°0</strong>
          </div>
          <div style="display: flex; justify-content: space-between; margin-bottom: 0.75rem;">
            <span>Impuestos:</span>
            <strong id="tax-amount" class="currency">‚Ç°0</strong>
          </div>
          <hr style="border: none; border-top: 1px solid var(--border); margin: 1rem 0;">
          <div style="display: flex; justify-content: space-between; font-size: 1.25rem; font-weight: 700;">
            <span>TOTAL:</span>
            <strong id="total-amount" class="currency">‚Ç°0</strong>
          </div>
        </div>

        <button type="button" id="create-invoice-btn" class="btn btn-primary" style="display: none; width: 100%; margin-top: 1.5rem;" onclick="submitInvoice()">
          üéØ Crear Factura Completa
        </button>
      </div>
    </div>
  </div>
  
  <div>
    <div class="card">
      <div class="card-header">
        <h3 class="card-title">‚ûï Agregar Producto</h3>
      </div>
      <div class="card-body">
        <% if @products.any? && @tax_rates.any? %>
          <div class="form-group">
            <label class="form-label">Producto</label>
            <select id="product-select" class="form-control" required>
              <option value="">Selecciona un producto...</option>
              <% @products.each do |product| %>
                <option value="<%= product.id %>" 
                        data-name="<%= product.name %>" 
                        data-price="<%= product.price %>" 
                        data-stock="<%= product.stock %>">
                  <%= product.name %> - ‚Ç°<%= number_with_delimiter(product.price, delimiter: ",") %> 
                  (<%= product.stock %> disponibles)
                </option>
              <% end %>
            </select>
          </div>
          
          <div class="form-group">
            <label class="form-label">Cantidad</label>
            <input type="number" id="quantity-input" min="1" class="form-control" placeholder="¬øCu√°ntos?" required>
            <small class="form-hint" id="stock-hint"></small>
          </div>
          
          <div class="form-group">
            <label class="form-label">Tipo de Impuesto</label>
            <select id="tax-rate-select" class="form-control" required>
              <option value="">Selecciona impuesto...</option>
              <% @tax_rates.each do |tax_rate| %>
                <option value="<%= tax_rate.id %>" 
                        data-name="<%= tax_rate.name %>" 
                        data-percentage="<%= tax_rate.percentage %>">
                  <%= tax_rate.name %> (<%= tax_rate.percentage %>%)
                </option>
              <% end %>
            </select>
          </div>
          
          <button type="button" onclick="addProductToInvoice()" class="btn btn-primary" style="width: 100%;">
            ‚ûï Agregar a Factura
          </button>
        <% else %>
          <div class="empty-state">
            <div style="font-size: 2rem; margin-bottom: 0.5rem;">‚ö†Ô∏è</div>
            <h4>Configuraci√≥n Incompleta</h4>
            <% if @products.empty? %>
              <p>No hay productos disponibles</p>
              <%= link_to "Crear Producto", new_product_path, class: "btn btn-primary", style: "margin-top: 1rem;" %>
            <% end %>
            <% if @tax_rates.empty? %>
              <p>No hay tasas de impuesto configuradas</p>
              <%= link_to "Configurar Impuestos", new_tax_rate_path, class: "btn btn-primary", style: "margin-top: 1rem;" %>
            <% end %>
          </div>
        <% end %>
      </div>
    </div>
  </div>
</div>

<script>
let invoiceItems = [];
let itemCounter = 0;

function addProductToInvoice() {
  const productSelect = document.getElementById('product-select');
  const quantityInput = document.getElementById('quantity-input');
  const taxRateSelect = document.getElementById('tax-rate-select');
  
  if (!productSelect.value || !quantityInput.value || !taxRateSelect.value) {
    showAlert('Completa todos los campos', 'warning');
    return;
  }
  
  const quantity = parseInt(quantityInput.value);
  if (quantity <= 0) {
    showAlert('La cantidad debe ser mayor a 0', 'warning');
    return;
  }
  
  const selectedProduct = productSelect.options[productSelect.selectedIndex];
  const productData = {
    id: selectedProduct.value,
    name: selectedProduct.dataset.name,
    price: parseFloat(selectedProduct.dataset.price),
    stock: parseInt(selectedProduct.dataset.stock)
  };
  
  const selectedTaxRate = taxRateSelect.options[taxRateSelect.selectedIndex];
  const taxData = {
    id: selectedTaxRate.value,
    name: selectedTaxRate.dataset.name,
    percentage: parseFloat(selectedTaxRate.dataset.percentage)
  };
  
  const currentQuantityUsed = invoiceItems
    .filter(item => item.product_id === productData.id)
    .reduce((total, item) => total + item.quantity, 0);
  
  if (currentQuantityUsed + quantity > productData.stock) {
    showAlert(`Stock insuficiente. Disponible: ${productData.stock - currentQuantityUsed}`, 'warning');
    return;
  }
  
  const item = {
    tempId: itemCounter++,
    product_id: productData.id,
    product_name: productData.name,
    quantity: quantity,
    unit_price: productData.price,
    tax_rate_id: taxData.id,
    tax_rate_name: taxData.name,
    tax_percentage: taxData.percentage
  };
  
  invoiceItems.push(item);
  updateDisplay();
  clearForm();
  showAlert(`${productData.name} agregado exitosamente`, 'success');
}

function removeItem(tempId) {
  const item = invoiceItems.find(item => item.tempId === tempId);
  invoiceItems = invoiceItems.filter(item => item.tempId !== tempId);
  updateDisplay();
  showAlert(`${item.product_name} eliminado`, 'success');
}

function updateDisplay() {
  const container = document.getElementById('invoice-items');
  const emptyState = document.getElementById('empty-state');
  const totalsSection = document.getElementById('totals-summary');
  const createBtn = document.getElementById('create-invoice-btn');
  const itemsCount = document.getElementById('items-count');
  
  if (invoiceItems.length === 0) {
    emptyState.style.display = 'block';
    totalsSection.style.display = 'none';
    createBtn.style.display = 'none';
    itemsCount.style.display = 'none';
    container.innerHTML = '<div class="empty-state" id="empty-state"><div style="font-size: 2rem; margin-bottom: 0.5rem;">üì¶</div><h4>Sin productos</h4><p>Agrega productos usando el panel lateral</p></div>';
    return;
  }
  
  emptyState.style.display = 'none';
  totalsSection.style.display = 'block';
  createBtn.style.display = 'block';
  itemsCount.style.display = 'inline-flex';
  itemsCount.textContent = `${invoiceItems.length} producto${invoiceItems.length !== 1 ? 's' : ''}`;
  
  let html = `
    <div class="table-container">
      <table class="table">
        <thead>
          <tr>
            <th>Producto</th>
            <th>Cant.</th>
            <th>Precio</th>
            <th>Total</th>
            <th></th>
          </tr>
        </thead>
        <tbody>
  `;
  
  let subtotal = 0;
  let totalTax = 0;
  
  invoiceItems.forEach(item => {
    const lineSubtotal = item.quantity * item.unit_price;
    const lineTax = lineSubtotal * item.tax_percentage / 100;
    const lineTotal = lineSubtotal + lineTax;
    
    subtotal += lineSubtotal;
    totalTax += lineTax;
    
    html += `
      <tr>
        <td>
          <div style="font-weight: 600; color: var(--text-primary);">${item.product_name}</div>
          <div style="font-size: 0.8rem; color: var(--text-muted);">${item.tax_rate_name} (${item.tax_percentage}%)</div>
        </td>
        <td style="font-weight: 600;">${item.quantity}</td>
        <td class="currency">‚Ç°${numberWithDelimiter(item.unit_price)}</td>
        <td class="currency" style="font-weight: 700;">‚Ç°${numberWithDelimiter(lineTotal)}</td>
        <td>
          <button type="button" onclick="removeItem(${item.tempId})" class="btn btn-sm btn-danger" title="Eliminar">
            √ó
          </button>
        </td>
      </tr>
    `;
  });
  
  html += '</tbody></table></div>';
  container.innerHTML = html;
  
  const total = subtotal + totalTax;
  document.getElementById('subtotal-amount').textContent = `‚Ç°${numberWithDelimiter(subtotal)}`;
  document.getElementById('tax-amount').textContent = `‚Ç°${numberWithDelimiter(totalTax)}`;
  document.getElementById('total-amount').textContent = `‚Ç°${numberWithDelimiter(total)}`;
}

function clearForm() {
  document.getElementById('product-select').value = '';
  document.getElementById('quantity-input').value = '';
  document.getElementById('tax-rate-select').value = '';
  document.getElementById('stock-hint').textContent = '';
}

function submitInvoice() {
  const clientName = document.querySelector('#invoice_client_name').value;
  
  if (!clientName || clientName.trim().length < 2) {
    showAlert('Ingresa el nombre del cliente (m√≠nimo 2 caracteres)', 'warning');
    return;
  }
  
  if (invoiceItems.length === 0) {
    showAlert('Agrega al menos un producto a la factura', 'warning');
    return;
  }
  
  const createBtn = document.getElementById('create-invoice-btn');
  createBtn.disabled = true;
  createBtn.innerHTML = '‚è≥ Creando Factura...';
  createBtn.classList.add('loading');
  
  const form = document.getElementById('invoice-form');
  
  const existingItems = form.querySelectorAll('[name^="invoice[items]"]');
  existingItems.forEach(input => input.remove());
  
  invoiceItems.forEach((item, index) => {
    const fields = ['product_id', 'product_name', 'quantity', 'unit_price', 'tax_rate_id', 'tax_rate_name', 'tax_percentage'];
    
    fields.forEach(field => {
      const input = document.createElement('input');
      input.type = 'hidden';
      input.name = `invoice[items][${index}][${field}]`;
      input.value = item[field];
      form.appendChild(input);
    });
  });
  
  form.submit();
}

function showAlert(message, type) {
  const alertDiv = document.createElement('div');
  alertDiv.className = `alert alert-${type} fade-in`;
  alertDiv.innerHTML = `<strong>${type === 'success' ? '‚úÖ' : '‚ö†Ô∏è'}</strong> ${message}`;
  alertDiv.style.position = 'fixed';
  alertDiv.style.top = '1rem';
  alertDiv.style.right = '1rem';
  alertDiv.style.zIndex = '1000';
  alertDiv.style.minWidth = '300px';
  
  document.body.appendChild(alertDiv);
  
  setTimeout(() => {
    alertDiv.remove();
  }, 3000);
}

function numberWithDelimiter(number) {
  return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}

document.addEventListener('DOMContentLoaded', function() {
  const productSelect = document.getElementById('product-select');
  if (productSelect) {
    productSelect.addEventListener('change', function() {
      const stockHint = document.getElementById('stock-hint');
      const selected = this.options[this.selectedIndex];
      
      if (selected && selected.value) {
        const stock = parseInt(selected.dataset.stock);
        const currentlyUsed = invoiceItems
          .filter(item => item.product_id === selected.value)
          .reduce((total, item) => total + item.quantity, 0);
        
        const available = stock - currentlyUsed;
        if (stockHint) {
          stockHint.textContent = `${available} unidades disponibles`;
          stockHint.style.color = available < 5 ? 'var(--warning)' : 'var(--success)';
        }
      } else {
        if (stockHint) stockHint.textContent = '';
      }
    });
  }

  const quantityInput = document.getElementById('quantity-input');
  if (quantityInput) {
    quantityInput.addEventListener('input', function() {
      const productSelect = document.getElementById('product-select');
      const selected = productSelect.options[productSelect.selectedIndex];
      
      if (selected && selected.value) {
        const stock = parseInt(selected.dataset.stock);
        const currentlyUsed = invoiceItems
          .filter(item => item.product_id === selected.value)
          .reduce((total, item) => total + item.quantity, 0);
        
        const available = stock - currentlyUsed;
        const requestedQuantity = parseInt(this.value);
        
        if (requestedQuantity > available) {
          this.value = available;
          showAlert(`Cantidad ajustada. M√°ximo disponible: ${available}`, 'warning');
        }
      }
    });
  }
});
</script>